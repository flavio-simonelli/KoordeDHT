KoordeDHT$ protoc \
  -I=proto \
  -I=/usr/include \
  --go_out=. --go_opt=module=github.com/flaviosimonelli/KoordeDHT \
  --go-grpc_out=. --go-grpc_opt=module=github.com/flaviosimonelli/KoordeDHT \
  proto/dht/v1/node.proto


docker run --rm -it \
  -p 5000:5000 \
  -e NODE_ID=0x99 \                       # ID del nodo (hex) oppure vuoto = random
  -e NODE_HOST=0.0.0.0 \                  # Host bind (in genere 0.0.0.0 nel container)
  -e NODE_PORT=5000 \                     # Porta gRPC del nodo
  \
  -e BOOTSTRAP_MODE=dns \                 # "dns" oppure "static"
  -e BOOTSTRAP_DNSNAME=bootstrap.koorde.local \  # Nome DNS bootstrap
  -e BOOTSTRAP_SRV=false \                # true = usa SRV, false = usa A/AAAA
  -e BOOTSTRAP_PORT=35761 \               # Porta se non usi SRV
  -e BOOTSTRAP_PEERS="10.0.1.5:5000,10.0.1.6:5000" \ # Peers statici se BOOTSTRAP_MODE=static
  \
  -e TRACE_ENABLED=true \                 # Abilita tracing
  -e TRACE_EXPORTER=otlp \                # "otlp" oppure "jaeger"
  -e TRACE_ENDPOINT=localhost:4317 \      # Endpoint collector tracing
  \
  -e REGISTER_ENABLED=true \              # Abilita self-registration DNS
  -e REGISTER_ZONE_ID=Z123456ABCDEFG \    # Hosted Zone ID di Route53
  -e REGISTER_SUFFIX=.koorde.local \      # Suffisso dominio (es. .koorde.local)
  -e REGISTER_TTL=60 \                    # TTL in secondi per il record DNS
  koorde-node:latest


docker run --rm -it \
  -e BOOTSTRAP_MODE=static \
  -e BOOTSTRAP_DNSNAME=bootstrap.koorde.local \
  -e BOOTSTRAP_SRV=false \
  -e BOOTSTRAP_PORT=35761 \
  -e BOOTSTRAP_PEERS="10.0.1.5:5000,10.0.1.6:5000" \
  \
  -e TRACE_ENABLED=true \
  -e TRACE_EXPORTER=otlp \
  -e TRACE_ENDPOINT=localhost:4317 \
  flaviosimonelli/koorde-node-minimal:1.0




questo è la medium:
logger:
  active: true             # Enable or disable logging (true | false)
  level: "info"            # Minimum log level: debug | info | warn | error
  encoding: "console"      # Log output format: console (human-readable) | json
  mode: "stdout"           # Log destination: stdout | file

  file:                    # File logging settings (used only if mode = file)
    path: "logs/app.log"   # Path to the log file
    maxSize: 5             # Maximum size (in MB) per log file before rotation
    maxBackups: 3          # Number of rotated log files to retain
    maxAge: 1              # Maximum age (in days) to retain old log files
    compress: true         # Compress old log files when rotating

dht:
  idBits: 32                # Identifier space size (keyspace = 2^idBits)
  mode: "private"          # Network mode: public (real network) | private (local/isolated)

  bootstrap:
    mode: "static"              # Bootstrap strategy: dns | static
    dnsName: "" # DNS name used when mode = dns
    srv: true                  # Use DNS SRV records if true, otherwise A/AAAA records
    port: 35761                 # Bootstrap port (used only when srv = false)
    peers: []                   # Static peer list (used only when mode = static)

    register:
      enabled: false                    # Se true, il nodo si registra in Route53
      hostedZoneId: ""      # ID della hosted zone
      domainSuffix: "" # Dove creare i record dei nodi
      ttl: 30                          # TTL per i record

  deBruijn:
    degree: 4              # Degree of the de Bruijn graph (2 = minimal, log n = optimal; must be a power of 2 for binary string representation)
    fixInterval: 10s       # Periodic refresh interval for de Bruijn pointers

  storage:
    fixInterval: 15s      # Periodic refresh interval for stored key-value pairs

  faultTolerance:
    successorListSize: 4   # Number of successors to maintain (≈ log n for fault tolerance)
    stabilizationInterval: 5s  # Periodic interval for successor stabilization
    failureTimeout: 3s     # Timeout for gRPC calls during stabilization; successors exceeding this timeout are marked as failed

node:
  id: ""                   # Node identifier in hexadecimal (empty = random ID)
  host: ""                 # Server host address (empty = all interfaces, depending on DHT mode)
  port: 0                  # gRPC server port (0 = automatically select a free port)

telemetry:
  tracing:
    enabled: false          # Enable or disable distributed tracing (true | false)
    exporter: otlp       # Tracing exporter to use (otlp | jaeger )
    endpoint: "" # Exporter endpoint (OTLP or Jaeger)


la minimal aveva id a 16 bit e poi degree e successor a 2

la strong a 64 bit id, degree a 8 e successor a 8