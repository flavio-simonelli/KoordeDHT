// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: dht/v1/node.proto

package dhtv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DHT_FindSuccessor_FullMethodName    = "/dht.v1.DHT/FindSuccessor"
	DHT_GetPredecessor_FullMethodName   = "/dht.v1.DHT/GetPredecessor"
	DHT_GetSuccessorList_FullMethodName = "/dht.v1.DHT/GetSuccessorList"
	DHT_Notify_FullMethodName           = "/dht.v1.DHT/Notify"
	DHT_Ping_FullMethodName             = "/dht.v1.DHT/Ping"
	DHT_Store_FullMethodName            = "/dht.v1.DHT/Store"
	DHT_Retrieve_FullMethodName         = "/dht.v1.DHT/Retrieve"
	DHT_Remove_FullMethodName           = "/dht.v1.DHT/Remove"
)

// DHTClient is the client API for DHT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHTClient interface {
	// Lookup in the Koorde overlay.
	// Returns the successor responsible for target_id.
	FindSuccessor(ctx context.Context, in *FindSuccessorRequest, opts ...grpc.CallOption) (*FindSuccessorResponse, error)
	// Returns this node's predecessor.
	GetPredecessor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Node, error)
	// Returns this node's successor list.
	GetSuccessorList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SuccessorList, error)
	// Notify a node that "node" may be its predecessor.
	// The callee updates state if the notification is valid.
	Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping to check liveness of the node (debug).
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Store a resource (Put). If the key already exists, overwrite it.
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieve a resource (Get).
	// Returns NotFound if the key does not exist.
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
	// Remove a resource (Delete).
	// Returns NotFound if the key does not exist.
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dHTClient struct {
	cc grpc.ClientConnInterface
}

func NewDHTClient(cc grpc.ClientConnInterface) DHTClient {
	return &dHTClient{cc}
}

func (c *dHTClient) FindSuccessor(ctx context.Context, in *FindSuccessorRequest, opts ...grpc.CallOption) (*FindSuccessorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSuccessorResponse)
	err := c.cc.Invoke(ctx, DHT_FindSuccessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) GetPredecessor(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, DHT_GetPredecessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) GetSuccessorList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SuccessorList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessorList)
	err := c.cc.Invoke(ctx, DHT_GetSuccessorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Notify(ctx context.Context, in *Node, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DHT_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DHT_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DHT_Store_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, DHT_Retrieve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DHT_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHTServer is the server API for DHT service.
// All implementations must embed UnimplementedDHTServer
// for forward compatibility.
type DHTServer interface {
	// Lookup in the Koorde overlay.
	// Returns the successor responsible for target_id.
	FindSuccessor(context.Context, *FindSuccessorRequest) (*FindSuccessorResponse, error)
	// Returns this node's predecessor.
	GetPredecessor(context.Context, *emptypb.Empty) (*Node, error)
	// Returns this node's successor list.
	GetSuccessorList(context.Context, *emptypb.Empty) (*SuccessorList, error)
	// Notify a node that "node" may be its predecessor.
	// The callee updates state if the notification is valid.
	Notify(context.Context, *Node) (*emptypb.Empty, error)
	// Ping to check liveness of the node (debug).
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Store a resource (Put). If the key already exists, overwrite it.
	Store(context.Context, *StoreRequest) (*emptypb.Empty, error)
	// Retrieve a resource (Get).
	// Returns NotFound if the key does not exist.
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	// Remove a resource (Delete).
	// Returns NotFound if the key does not exist.
	Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDHTServer()
}

// UnimplementedDHTServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDHTServer struct{}

func (UnimplementedDHTServer) FindSuccessor(context.Context, *FindSuccessorRequest) (*FindSuccessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedDHTServer) GetPredecessor(context.Context, *emptypb.Empty) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (UnimplementedDHTServer) GetSuccessorList(context.Context, *emptypb.Empty) (*SuccessorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessorList not implemented")
}
func (UnimplementedDHTServer) Notify(context.Context, *Node) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedDHTServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDHTServer) Store(context.Context, *StoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedDHTServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedDHTServer) Remove(context.Context, *RemoveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedDHTServer) mustEmbedUnimplementedDHTServer() {}
func (UnimplementedDHTServer) testEmbeddedByValue()             {}

// UnsafeDHTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHTServer will
// result in compilation errors.
type UnsafeDHTServer interface {
	mustEmbedUnimplementedDHTServer()
}

func RegisterDHTServer(s grpc.ServiceRegistrar, srv DHTServer) {
	// If the following call pancis, it indicates UnimplementedDHTServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DHT_ServiceDesc, srv)
}

func _DHT_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuccessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_FindSuccessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).FindSuccessor(ctx, req.(*FindSuccessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_GetPredecessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).GetPredecessor(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_GetSuccessorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).GetSuccessorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_GetSuccessorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).GetSuccessorList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Notify(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Retrieve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHT_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DHT_ServiceDesc is the grpc.ServiceDesc for DHT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dht.v1.DHT",
	HandlerType: (*DHTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _DHT_FindSuccessor_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _DHT_GetPredecessor_Handler,
		},
		{
			MethodName: "GetSuccessorList",
			Handler:    _DHT_GetSuccessorList_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _DHT_Notify_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DHT_Ping_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _DHT_Store_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _DHT_Retrieve_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DHT_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dht/v1/node.proto",
}
